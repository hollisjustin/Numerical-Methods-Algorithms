function [L,U,P] = luFactor(A)
% LU Factorization of a square matrix, using partial pivoting
%   inputs
%          A = coefficient matrix (square)
%   outputs
%          L = lower triangle matrix (stores multiplication factors used in
%          elimination)
%          U = upper triangle matrix (generated by elimination with
%          partial pivoting)
%          P = pivot matrix (keeps track of row switches) 
%   end goal : [P][A]=[L][U]

% argument check to prevent operator error
if nargin~=1
    error('[A] must be single matrix')
end
[m,n]=size(A); % size of initial coefficient matrix
% check to make sure initial coefficient matrix is square
if m~=n
    error('must be square matrix') 
end    
% set inital conditions for outputs
L=eye(n); % L is initially an identity matrix 
U=A; % U initially equals A
P=eye(n); % P is initially an identity matrix
x=1;
% Step 1 Pivot
for a=1:n
    b=find(max(abs(U(x:a,a)))); % the highest abs value in column a
    x=x+1;
    U([a,b],:)=U([b,a],:); %swaps row 'a' with row with highest abs value
    P([a,b],:)=P([b,a],:);  %track swap with P
    % elimination of U(n+1,n)
    for c=a+1:m
        U(c,a:m)=U(c,a:m)-(L(a+1,a)*U(a,a:m)); % gauss elimination
    end
end
L=(P*A)/U
end



